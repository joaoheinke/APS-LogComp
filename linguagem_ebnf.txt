(* ====================== *)
(* FutLang — EBNF (futebol) *)
(* ====================== *)

programa        = { declaracao | comando } ;

(* Declarações *)
declaracao      = "jogador" ident [ "=" expr ] ";" ;

(* Comandos *)
comando         = atribuicao ";"
                | acao ";"
                | gol_stmt ";"
                | cartao_stmt
                | prorrogacao_stmt
                | acrescimos_stmt
                | bloco ;

bloco           = "{" { comando } "}" ;

(* Condicional *)
cartao_stmt     = "cartao" "(" expr ")" comando
                  [ "substituicao" comando ] ;

(* Loop while *)
prorrogacao_stmt= "prorrogacao" "(" expr ")" comando ;

(* Loop for *)
acrescimos_stmt = "acrescimos" "("
                    atribuicao_opt ";" expr_opt ";" atribuicao_opt
                  ")" comando ;

atribuicao_opt  = atribuicao | /* vazio */ ;
expr_opt        = expr | /* vazio */ ;

(* Atribuição *)
atribuicao      = ident "=" expr ;

(* Ações temáticas *)
acao            = "chutar" "(" expr ")"          (* intensidade/força *)
                | "tocar"  "(" ident ")"         (* passar a alguém   *)
                | "marcar" "(" ident ")" ;       (* marcar jogador   *)

(* Saída *)
gol_stmt        = "gol" "(" expr ")" ;           (* imprime/assinala *)

(* Expressões (booleana: != 0) *)
expr            = exp_or ;

exp_or          = exp_and { "||" exp_and } ;
exp_and         = exp_eq  { "&&" exp_eq  } ;
exp_eq          = exp_rel [ ( "==" | "!=" ) exp_rel ] ;
exp_rel         = exp_add [ ( "<" | "<=" | ">" | ">=" ) exp_add ] ;
exp_add         = exp_mul { ( "+" | "-" ) exp_mul } ;
exp_mul         = exp_un  { ( "*" | "/" | "%" ) exp_un } ;
exp_un          = [ "!" | "-" ] exp_prim ;

exp_prim        = numero
                | booleano
                | sensor
                | ident
                | "(" expr ")" ;

(* Sensores read-only *)
sensor          = "placar" | "tempo" | "estadio" ;

(* Literais *)
booleano        = "verdadeiro" | "falso" ;
numero          = digito { digito } ;

(* Léxicos *)
ident           = letra { letra | digito | "_" } ;
letra           = "A" | ... | "Z" | "a" | ... | "z" ;
digito          = "0" | ... | "9" ;

(* Operadores e pontuação reconhecidos:
   =  == != < <= > >=  + - * / %  && ||  !  ; , ( ) { }
*)

(* Precedência (maior → menor):
   1) unários: !  - 
   2) *  /  %
   3) +  -
   4) <  <=  >  >=
   5) ==  !=
   6) &&
   7) ||
*)
