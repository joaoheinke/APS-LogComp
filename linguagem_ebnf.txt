(* ========================================================= *)
(* FutLang — EBNF (tema: futebol) — Versão 1.1 (revisada)    *)
(* ========================================================= *)

programa            = { declaracao_ou_comando } ;

declaracao_ou_comando
                    = declaracao | comando ;

(* ------------------------ *)
(* Declarações              *)
(* ------------------------ *)
declaracao          = "jogador" ident [ "=" expr ] ";" ;

(* ------------------------ *)
(* Comandos                 *)
(* ------------------------ *)
comando             = atribuicao ";"
                    | acao ";"
                    | gol_stmt ";"
                    | cartao_stmt
                    | prorrogacao_stmt
                    | acrescimos_stmt
                    | bloco ;

bloco               = "{" { declaracao_ou_comando } "}" ;
(* ↑ permite declarar dentro de blocos *)

(* ------------------------ *)
(* Condicional              *)
(* ------------------------ *)
cartao_stmt         = "cartao" "(" expr ")" comando
                      [ "substituicao" comando ] ;
(* if (cartao) ... else (substituicao) ... *)

(* ------------------------ *)
(* Loop while               *)
(* ------------------------ *)
prorrogacao_stmt    = "prorrogacao" "(" expr ")" comando ;

(* ------------------------ *)
(* Loop for                 *)
(* ------------------------ *)
acrescimos_stmt     = "acrescimos" "("
                        atribuicao_opt ";" expr_opt ";" atribuicao_opt
                      ")" comando ;
atribuicao_opt      = atribuicao | /* vazio */ ;
expr_opt            = expr | /* vazio */ ;
(* Semântica (informativa): expr_opt vazia ≡ verdadeiro; 
   atribuicao_opt vazia ≡ nenhum efeito. *)

(* ------------------------ *)
(* Atribuição               *)
(* ------------------------ *)
atribuicao          = lvalue "=" expr ;
lvalue              = ident ;
(* Sensores são read-only por construção: não são lvalues. *)

(* ------------------------ *)
(* Ações temáticas          *)
(* ------------------------ *)
acao                = "chutar" "(" expr ")"
                    | "tocar"  "(" ident ")"
                    | "marcar" "(" ident ")" ;

(* ------------------------ *)
(* Saída / print            *)
(* ------------------------ *)
gol_stmt            = "gol" "(" expr ")" ;

(* ------------------------ *)
(* Expressões               *)
(* ------------------------ *)
expr                = exp_or ;

exp_or              = exp_and { "||" exp_and } ;
exp_and             = exp_eq  { "&&" exp_eq  } ;
exp_eq              = exp_rel [ ( "==" | "!=" ) exp_rel ] ;
exp_rel             = exp_add [ ( "<" | "<=" | ">" | ">=" ) exp_add ] ;
exp_add             = exp_mul { ( "+" | "-" ) exp_mul } ;
exp_mul             = exp_un  { ( "*" | "/" | "%" ) exp_un } ;
exp_un              = [ "!" | "-" ] exp_prim ;

exp_prim            = numero
                    | booleano
                    | sensor
                    | ident
                    | "(" expr ")" ;

(* ------------------------ *)
(* Sensores (read-only)     *)
(* ------------------------ *)
sensor              = "placar" | "tempo" | "estadio" ;

(* ------------------------ *)
(* Literais                 *)
(* ------------------------ *)
booleano            = "verdadeiro" | "falso" ;
numero              = digito { digito } ;

(* ------------------------ *)
(* Léxicos                  *)
(* ------------------------ *)
ident               = !palavra_reservada letra { letra | digito | "_" } ;
(* ↑ ident NÃO pode ser palavra reservada *)

palavra_reservada   = "jogador" | "cartao" | "substituicao" | "prorrogacao"
                    | "acrescimos" | "gol" | "chutar" | "tocar" | "marcar"
                    | "verdadeiro" | "falso" | "placar" | "tempo" | "estadio" ;

letra               = "A" | ... | "Z" | "a" | ... | "z" ;
digito              = "0" | ... | "9" ;

(* ------------------------ *)
(* Operadores & pontuação   *)
(* (reconhecidos pelo léxico) *)
(* =  == != < <= > >=  + - * / %  && ||  !  ; , ( ) { } *)
(* ------------------------ *)

(* ------------------------ *)
(* Comentários e espaços    *)
(* ------------------------ *)
espaco              = " " | "\t" | "\r" | "\n" ;
comentario_linha    = "//" { qualquer } "\n" ;
comentario_bloco    = "/*" { qualquer } "*/" ;
(* O analisador léxico deve ignorar espacos e comentários. *)
qualquer            = ? qualquer caractere não termina o comentário ? ;

(* ------------------------ *)
(* Precedência (maior→menor) *)
(* 1) unários: !  - 
   2) *  /  %
   3) +  -
   4) <  <=  >  >=
   5) ==  !=
   6) &&
   7) ||                                           *)
(* ------------------------ *)
